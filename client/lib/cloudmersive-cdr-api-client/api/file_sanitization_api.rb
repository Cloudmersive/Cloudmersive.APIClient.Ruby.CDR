=begin
#CDR API

#Use the Content Disarm and Reconstruction API to remove security risks from documents by tearing them down, removing unsafe content and rebuilding them.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'uri'

module CloudmersiveCdrApiClient
  class FileSanitizationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Complete Content Disarm and Reconstruction on an Input File, and output in same file format
    # Processes the input file via CDR to produce a secured output file.  Input content is parsed, disarmed, and then reconstructed into a new output file with the same file format as the input.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :input_file Input document, or photos of a document, to extract data from
    # @return [nil]
    def file(opts = {})
      file_with_http_info(opts)
      nil
    end

    # Complete Content Disarm and Reconstruction on an Input File, and output in same file format
    # Processes the input file via CDR to produce a secured output file.  Input content is parsed, disarmed, and then reconstructed into a new output file with the same file format as the input.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :input_file Input document, or photos of a document, to extract data from
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def file_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FileSanitizationApi.file ...'
      end
      # resource path
      local_var_path = '/cdr/sanitization/file'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['InputFile'] = opts[:'input_file'] if !opts[:'input_file'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileSanitizationApi#file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Complete Content Disarm and Reconstruction on an Input File with PDF/A Output
    # Processes the input file via CDR to produce a secured PDF/A output file.  Input content is parsed, disarmed, and then reconstructed into a new PDF/A output file.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :input_file Input document, or photos of a document, to extract data from
    # @return [nil]
    def file_to_pdf(opts = {})
      file_to_pdf_with_http_info(opts)
      nil
    end

    # Complete Content Disarm and Reconstruction on an Input File with PDF/A Output
    # Processes the input file via CDR to produce a secured PDF/A output file.  Input content is parsed, disarmed, and then reconstructed into a new PDF/A output file.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :input_file Input document, or photos of a document, to extract data from
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def file_to_pdf_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FileSanitizationApi.file_to_pdf ...'
      end
      # resource path
      local_var_path = '/cdr/sanitization/file/to/pdf'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['InputFile'] = opts[:'input_file'] if !opts[:'input_file'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileSanitizationApi#file_to_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
